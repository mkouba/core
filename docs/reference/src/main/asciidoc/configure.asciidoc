[[configure]]
== Configuration

=== Weld configuration

Weld can be configured per application through the set of properties. All the supported configuration properties are described in the following subsections.

Each configuration property can be specified (by priority in descending order):

. In a properties file named `weld.properties`
. As a system property
. By a bootstrap configuration provided by an integrator

If a configuration key is set in multiple sources (e.g. as a system property and in a properties file), the value from the source with higher priority is taken, other values are ignored. Unsupported configuration keys are ignored. If an invalid configuration property value is set, the container automatically detects the problem and treats it as a deployment problem.

[[relaxedConstruction]]
==== Relaxed construction

CDI requires that beans that are normal-scoped, intercepted or decorated always define a no-argument constructor.
This requirement applies even if the bean already defines an `@Inject` annotated constructor with parameters.
This is purely a technical requirement implied by how Java allocates class instances.

Weld is however able to operate fine even if this requirement is not met.
Weld uses special non-portable JVM APIs that allow it to allocate proxy instances without calling proxy's constructor.
This mode is not enabled by default. It can be enabled using the following configuration option:

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.construction.relaxed` |false (true in weld-se)|If set to `true`, then requirements on bean constructors are relaxed.
|=======================================================================

Note that relaxed construction is enabled by default in <<weld-se,Weld SE>>.

==== Concurrent deployment configuration

By default Weld supports concurrent loading and deploying of beans.
However, in certain deployment scenarios the default setup may not be
appropriate.

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.bootstrap.concurrentDeployment` |true |If set to false, `ConcurrentDeployer` and
`ConcurrentValidator` will not be used.

|`org.jboss.weld.bootstrap.preloaderThreadPoolSize`
|`Math.max(1, Runtime.getRuntime().availableProcessors() - 1)` |Weld is
capable of resolving observer methods for container lifecycle events in
advance while bean deployer threads are blocked waiting for I/O
operations (such as classloading). This process is called preloading and
leads to better CPU utilization and faster application startup time.
This configuration option specifies the number of threads used for
preloading. If set to 0, preloading is disabled.
|=======================================================================

NOTE: The bootstrap configuration may be altered using the deprecated `org.jboss.weld.bootstrap.properties` file located on the classpath (e.g. `WEB-INF/classes/org.jboss.weld.bootstrap.properties` in a web archive). The keys are `concurrentDeployment` and `preloaderThreadPoolSize`.

==== Thread pool configuration

For certain types of tasks Weld uses its own thread pool. The thread
pool is represented by the `ExecutorServices` service.

First of all, let's see what types of thread pools are available:

[cols=",",options="header",]
|==========================================
|Thread pool type|Description
|`FIXED`|Uses a fixed number of threads. The number of threads remains the same throughout the application.
|`FIXED_TIMEOUT`|Uses a fixed number of threads. A thread will be stopped after a configured period of inactivity.
|`SINGLE_THREAD`|A single-threaded thread pool
|`NONE`|No executor is used by Weld
|`COMMON`|The default ForkJoinPool.commonPool() is used by Weld. See https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#commonPool--[link] for more details
|==========================================

Now let's see how to configure Weld to use a particular thread pool type:

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.executor.threadPoolType` |`FIXED` |The type of the thread pool. Possible values
are: `FIXED`, `FIXED_TIMEOUT`, `NONE`, `SINGLE_THREAD` and `COMMON`

|`org.jboss.weld.executor.threadPoolSize` |`Runtime.getRuntime().availableProcessors()` |The
number of threads to be used for bean loading and deployment. Only used by `FIXED` and `FIXED_TIMEOUT`.

|`org.jboss.weld.executor.threadPoolKeepAliveTime` |60 seconds |Passed to the constructor of the
ThreadPoolExecutor class, maximum time that excess idle threads will
wait for new tasks before terminating. Only used by `FIXED_TIMEOUT`.

|`org.jboss.weld.executor.threadPoolDebug` |false |If set to true, debug timing information is
printed to the standard output.
|=======================================================================

NOTE: It's possible to alter the thread pool configuration using the deprecated `org.jboss.weld.executor.properties` file located on the classpath. The keys are `threadPoolType`, `threadPoolSize`, `threadPoolKeepAliveTime` and `threadPoolDebug`.

==== Non-portable mode during application initialization

By default the application initialization is performed in the portable
mode which denotes specification-compliant behaviour. However it's also
possible to enable the non-portable mode, in which some definition
errors and deployment problems do not cause application initialization
to abort. Currently the non-portable mode allows extension developers to
call all the `BeanManager`'s methods before the
`AfterDeploymentValidation` event is fired.

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.nonPortableMode` |false|If set to `true`, the non-portable mode is enabled.
|=======================================================================

NOTE: The main purpose of the non-portable mode is to support some legacy
extensions. It's highly recommended to use the portable mode whenever
possible - non-portable mode may lead to unexpected behaviour during
initialization process.

==== Bounding the cache size for resolved injection points

Weld caches already resolved injection points in order to resolve them
faster in the future. A separate type-safe resolver exists for
beans, decorators, disposers, interceptors and observers. Each of them
stores resolved injection points in its cache, which maximum size is
bounded by a default value (common to all of them).

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.resolution.cacheSize` |1000|The upper bound of the cache.
|=======================================================================

==== Debugging generated bytecode

For debugging purposes, it's possible to dump the generated bytecode of client proxies and enhanced subclasses to the filesystem.

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.proxy.dump` ||The file path where the files should be stored.
|=======================================================================

==== Injectable reference lookup optimization

For certain combinations of scopes, the container is permitted to optimize an injectable reference lookup. Enabling this feature brings some performance boost but causes `javax.enterprise.context.spi.AlterableContext.destroy()` not to work properly for `@ApplicationScoped` and `@RequestScoped` beans. Therefore, the optimization is disabled by default.

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.injection.injectableReferenceOptimization` |false |If set to `true`, the optimization is enabled.
|=======================================================================

==== Bean identifier index optimization

This optimization is used to reduce the HTTP session replication overhead. However, the inconsistency detection mechanism may cause problems in some development environments. It's recommended to disable this optimization during the development phase. 

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.serialization.beanIdentifierIndexOptimization` |true (false in weld-servlet)|If set to `true`, the optimization is enabled.
|=======================================================================

NOTE: This optimization is disabled by default in <<weld-servlet,Servlet containers>>.

[[config-dev-mode]]
==== Development Mode

Some features of the development mode may have negative impact on the performance/functionality of the application. The following configuration properties allow to tune/disable these features, e.g. to specify the set of components which will be monitored.

.Supported configuration properties
[cols=",,",options="header",]
|=======================================================================
|Configuration key |Default value |Description
|`org.jboss.weld.probe.invocationMonitor.excludeType` |'' |A regular expression. If a non-empty string and the base type for an AnnotatedType or a declaring type for an AnnotatedMember matches this pattern the type is excluded from monitoring.
|`org.jboss.weld.probe.invocationMonitor.skipJavaBeanProperties` |'true' |If set to `true`, the JavaBean accessor methods are not monitored.
|`org.jboss.weld.probe.eventMonitor.excludeType` |'' |A regular expression. If a non-empty string  and the runtime class of the event object matches this pattern the event is excluded from monitoring.
|`org.jboss.weld.probe.embedInfoSnippet` |'true' | If set to `true` an informative HTML snippet will be added to every HTTP response with Content-Type of value `text/html`.
|=======================================================================

TIP: To disable the monitoring entirely set `org.jboss.weld.probe.invocationMonitor.excludeType` and `org.jboss.weld.probe.eventMonitor.excludeType` properties to `.*`.

=== Excluding classes from scanning and deployment

CDI 1.1 allows you to exclude classes in your archive from being
scanned, having container lifecycle events fired, and being deployed as
beans. See also
http://docs.jboss.org/cdi/spec/1.1/cdi-spec.html#bean_discovery[12.4.
Bean discovery].

NOTE: Weld still supports the original non-portable way of excluding classes
from discovery. The formal specification can be found in the xsd,
located at http://jboss.org/schema/weld/beans_1_1.xsd. Unlike Weld, the
CDI specification does not support regular expression patterns and `!`
character to invert the activation condition.

All the configuration is done in the `beans.xml` file. For more
information see <<packaging-and-deployment>>.

[source.XML, xml]
------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://xmlns.jcp.org/xml/ns/javaee">

    <scan>

        <!-- Don't deploy the classes for the swing app! -->
        <exclude name="com.acme.swing.**" />

        <!-- Don't include GWT support if GWT is not installed -->
        <exclude name="com.acme.gwt.**">
            <if-class-not-available name="com.google.GWT"/>
        </exclude>

        <!--
            Exclude types from com.acme.verbose package if the system property verbosity is set to low
            i.e.
              java ... -Dverbosity=low
        -->
        <exclude name="com.acme.verbose.*">
            <if-system-property name="verbosity" value="low"/>
        </exclude>

        <!--
             Don't include JSF support if Wicket classes are present, and the viewlayer system
             property is set
        -->
        <exclude name="com.acme.jsf.**">
            <if-class-available name="org.apache.wicket.Wicket"/>
            <if-system-property name="viewlayer"/>
        </exclude>
    </scan>

</beans>
------------------------------------------------------------------------------------------------------

In this example we show the most common use cases for exercising fine
control over which classes Weld scans. The first filter excludes all
types whose package name starts with `com.acme.swing`, and in most cases
this will be sufficient for your needs.

However, sometimes it's useful to be able to activate the filter
depending on the environment used. In this case, Weld allows you to
activate (or deactivate) a filter based on either system properties or
whether a class is available. The second filter shows the use case of
disabling scanning of certain classes depending on the capabilities of
the environment you deploy to - in this case we are excluding GWT
support (all types whose package name starts with `com.acme.gwt`) if GWT
is not installed.

NOTE: If you specify just a system property name, Weld will activate the
filter if that system property has been set (with any value). If you
also specify the system property value, then Weld will only activate the
filter if the system property's value matches exactly.

The third filter shows how to exclude all types from a specific package
(note the `name` attribute has suffix ".*").

The fourth filter shows more a advanced configurations, where we use
multiple activation conditions to decide whether to activate the filter.

You can combine as many activation conditions as you like (_all_ must be
true for the filter to be activated). If you want to a filter that is
active if _any_ of the activation conditions are true, then you need
multiple identical filters, each with different activation conditions.


=== Mapping CDI contexts to HTTP requests

By default, CDI contexts are activated at the beginning of an HTTP
request processing and deactivated once the processing finishes. This
may represent an unnecessary overhead in certain situations, for example
static resource serving.

Weld allows CDI context support to be mapped to a certain subset of
requests only. A regular expression may be used for filtering HTTP
requests that should have CDI contexts active during their processing.

[source.XML, xml]
-----------------------------------------------------------------------------------------------------------
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee/"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">

    <context-param>
        <param-name>org.jboss.weld.context.mapping</param-name>
        <param-value>.*\.html</param-value>
    </context-param>

</web-app>
-----------------------------------------------------------------------------------------------------------
